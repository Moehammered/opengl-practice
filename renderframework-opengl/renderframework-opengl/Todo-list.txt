begin entity component design
	for entity architecture
		http://www.gameprogrammingpatterns.com/flyweight.html
		http://www.gameprogrammingpatterns.com/component.html
		http://wiki.c2.com/?StrategyPattern

	Made scene class, and for now inheriting it to make FPSDemo
		Similar to the game class and how it works in Monogame

	Need to move over the stuff from main into the FPSDemo and
		use that to make small tests for now
			--- think I'll need to refactor a lot of the base
			stuff since shader and texture require heap allocation

		Need to make an Input class
			functions statically or via singleton too.
			

			Made but, its not elegant at all...
				interesting find though.
					when using local reference of an object from a pointer,
					it seems to return a copy of the object. Then this object
					will be destroyed after the function leaves scope.
					But if I simply use Instance().functioncall() it doesnt
					do so...
					So I swapped out to returning the pointer for now,
						->look into returning reference objects that won't
						destroy?






Transformations
	Translation, rotation, scale

	quaternions
		http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/
		to read: 
			https://github.com/fehaar/FFWD/blob/master/Framework/PressPlay.FFWD/Quaternion.cs
			https://github.com/Moehammered/MonogameLearning/blob/master/Pathfinding/Pathfinding/BaseComponents/Transform.cs

Transform component made
	Can rotate, but needs tests to see what is bugged/misoriented
	position is fine
	needs functions to automatically return its mat4 representations
				OR
	create a helper header that will have functions to automatically get the required mat4
	(probably better... maybe)

Camera component made
	can create a view and projection matrix
	moves around with a transform
	can be updated


Debugging Features
	Add line rendering class

;;;;;;;;;;;;Orientation debugging;;;;;;;
	FIXED!!!!!!!!!!!!!!!!
		https://stackoverflow.com/questions/18151845/converting-glmlookat-matrix-to-quaternion-and-back
		the lookat function makes a matrix ready for view transformation (pre-inverted)
		thus the matrix needed to be conjugated to get the actual orientation before
			(so should make own lookat)
	Seems like orientation vectors are fine, but the actual rendering is inverted??
	see - https://community.khronos.org/t/get-direction-from-transformation-matrix-or-quat/65502/2
		seems to work when extracting the directions from rot matrix but the forward vector is flipped........
	Found the cause
		The update view function seems to work if I do not use the transform.position + transform.Forward() for the lookat.
		Meaning, the lookat function of the transform class is not accurate/correct
		http://joestevens.net/post/20063172257/alternate-view-matrix-construction

Next
	Make an fps demo to test transforms
		-started basic movement
		-needs rotation ------------------
			-rotation is inverted, mainly orientation vectors are
				
	
	create primitive shape types
		-cube (done but UVs are screwed for top and bottom face)
			should make individual points for the cube since each face has it's own UVs
		-sphere
			http://www.songho.ca/opengl/gl_sphere.html#icosphere
		-cylinder