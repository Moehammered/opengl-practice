Next necessity (May 25th 2019)
	+Vertex Array Object
		keep and protect vertex array state
		allow it to be bound so opengl calls can be made
		only owning class can destroy it (return const reference for binding usage)
	+OpenGL state object??
		keep track of some of the opengl state for query
		needs to be fleshed out, but an idea for now (see TransformVisualiser::drawAxis())
		or be a helper class to query basic state
	+Collision detection
		Simple AABB first
		Research mass object count collision detection
			one idea: use "movement" flags to add something to a collision queue
		Visualise Collision boxes
	+Clean up render component
		Remove the mesh member property
		redefine a derived class for MeshRenderer that takes a mesh
			Let the	user decide if they'll use DynamicMesh or StaticMesh for now
			Later might make a StaticMeshRenderer and DynamicMeshRenderer component
			to better specialise their rendering and allow buffer mapping(maybe)

stuff to look at later: http://www.stroustrup.com/bs_faq2.html#constraints

begin entity component design
	for entity architecture
		http://www.gameprogrammingpatterns.com/flyweight.html
		http://www.gameprogrammingpatterns.com/component.html
		http://wiki.c2.com/?StrategyPattern

		http://www.gameprogrammingpatterns.com/data-locality.html
			look into this for optimising how components are updated
			and how active gameobjects vs delete requested gameobjects are sorted
			out in memory.
				(2 sided frame memory allocation pattern?)

		(Done/Solved)
		Started Object class
			Need to make GameObject and Component inherit from
			this class.
			Then rewrite the instantiate functions for GameObject
			and component's addcomponent functionality.

			Component and GameObject inherit from Object now.
			There is an ObjectAllocator class that handles their main
			pointers for destruction.
			Learned that a pointer can be referred in a function.
			Now the Destroy and Instantiate functions mimic the functioning
			of Unity's and C#'s. 
			However it's starting to become convoluted,
			so maybe re-designing it so the 'new' keyword can be used would
			pose better for readability. Or atleast allow the 'delete' keyword
			to be used?
			I should look into shared_ptr's functionality and attempt using it.
		
		(Done)
		PROBLEM: needs to be changed into factory method.
			Factory method
				Need to abstract all instantiation and destruction...
					component, gameobject should inherit from an Object.
					This object has basic allocation functions for memory,
					list location, should be abstract too.
					When GameObject factory instantiates it, it makes it
					as a GameObject and returns its reference.
					When Component factory instantiates it, it makes it as
					a Component, returns its reference, and allocates its owner.
					When "tickable" component is added, same as component, but 
					it is added into a queue for updates.
					When "renderable" component is added, same as component but
					it is added into a queue for rendering.
					Destroying involves invoking cleanup from the factory.
					It removes the reference from main storage and destroys
					the object, then the object upon destroying itself will
					remove itself from the respective queue it joined.
				Problems:
					+Need to ensure 1 copy of the object only!
					+If its destroyed, all references will be nullified, or
					the references must point to a null object.
					+memory fragmentation needs to be managed when objects are destroyed
						+possible solution: pre-allocate a set block of memory and use
							it as an array, with the object's id being its array access
							location. 
								(
									different classes will end up being different sizes
									so can override the [] operator to auto-resolve the
									size differences, or take it into account when
									de-referencing the memory location.
									Delete might need to be overridin too.
								)
								

	If i am to follow similar implementation schema to Unity, then:
		(go/done) - Need some static helper/creation functions that perform the purpose
		of setting up components or gameobjects
			For now, active gameobjects are a large list within the GameObject
			class, but need to be moved into somewhere else later

		(done) - Destroy objects and have them cleaned up
			gameobjects can be queued up to be destroyed
			their components are destroyed.
			base Component class didn't have a virtual destructor,
			so when destroy was called on a "Component" pointer it 
			didn't invoke the destructors for the derived classes

		(Deprecated) - when gameobjects are created, they need to be able to be added
		to an active scene immmediately.

		(done) - drawing components need to be rendered last, 
			after non-render components
				started on making a renderer component
				needs to have logic to auto-add itself to a render queue.

		(done /!\) - need to block being able to use "new T()" for components, force
		the AddComponent<T>() function to be the only way
			(make Component constructor private, GameObject friend class?)

	Component Assertion for AddComponent
		links:
		https://en.cppreference.com/w/cpp/language/dynamic_cast
		https://en.cppreference.com/w/cpp/error/assert
		https://en.cppreference.com/w/cpp/language/template_specialization
		http://www.cplusplus.com/doc/oldtutorial/templates/

		(Done - needs refactoring to block being destroyed without Destroy function)
		Continue testing how components are added and removed
			So far, components are not destroyed unnecessarily
			but needs more testing.

	(Done-ish)
	Made scene class, and for now inheriting it to make FPSDemo
		Similar to the game class and how it works in Monogame

	(Done)
	Need to move over the stuff from main into the FPSDemo and
		use that to make small tests for now
			--- think I'll need to refactor a lot of the base
			stuff since shader and texture require heap allocation

		Need to make an Input class
			functions statically or via singleton too.
			added mouse movement into the Input class
				needs normalised versions of its movements -1 to 1 values.
				Added normalised values but it just ended up making it difficult to
				move the mouse properly... well for now both are available now

			Made but, its not elegant at all...
				interesting find though.
					when using local reference of an object from a pointer,
					it seems to return a copy of the object. Then this object
					will be destroyed after the function leaves scope.
					But if I simply use Instance().functioncall() it doesnt
					do so...
					So I swapped out to returning the pointer for now,
						->look into returning reference objects that won't
						destroy?






Transformations (Done)
	Translation, rotation, scale

	quaternions
		http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/
		to read: 
			https://github.com/fehaar/FFWD/blob/master/Framework/PressPlay.FFWD/Quaternion.cs
			https://github.com/Moehammered/MonogameLearning/blob/master/Pathfinding/Pathfinding/BaseComponents/Transform.cs

Transform component made (DONE)
	Can rotate, but needs tests to see what is bugged/misoriented
	position is fine
	needs functions to automatically return its mat4 representations
				OR
	create a helper header that will have functions to automatically get the required mat4
	(probably better... maybe)

Camera component made
	can create a view and projection matrix
	moves around with a transform
	can be updated


Debugging Features
	Add line rendering class (DONE)

;;;;;;;;;;;;Orientation debugging;;;;;;;
	FIXED!!!!!!!!!!!!!!!!
		https://stackoverflow.com/questions/18151845/converting-glmlookat-matrix-to-quaternion-and-back
		the lookat function makes a matrix ready for view transformation (pre-inverted)
		thus the matrix needed to be conjugated to get the actual orientation before
			(so should make own lookat)
	Seems like orientation vectors are fine, but the actual rendering is inverted??
	see - https://community.khronos.org/t/get-direction-from-transformation-matrix-or-quat/65502/2
		seems to work when extracting the directions from rot matrix but the forward vector is flipped........
	Found the cause
		The update view function seems to work if I do not use the transform.position + transform.Forward() for the lookat.
		Meaning, the lookat function of the transform class is not accurate/correct
		http://joestevens.net/post/20063172257/alternate-view-matrix-construction

Next
	Make an fps demo to test transforms (DONE)
		-started basic movement
		-needs rotation ------------------
			-rotation is inverted, mainly orientation vectors are
				
	
	create primitive shape types
		-cube (done but UVs are screwed for top and bottom face)
			should make individual points for the cube since each face has it's own UVs
		-sphere
			http://www.songho.ca/opengl/gl_sphere.html#icosphere
		-cylinder